<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="dc/d59/classGoogleNews" kind="class" language="C++" prot="public">
    <compoundname>GoogleNews</compoundname>
    <includes refid="d2/dfa/news__configure_8h" local="no">news_configure.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a76c1ba4c506e760487c3575270e3b6c1" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::__news_url</definition>
        <argsstring></argsstring>
        <name>__news_url</name>
        <qualifiedname>GoogleNews::__news_url</qualifiedname>
        <initializer>=&quot;https://news.google.com/rss&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="22" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a59a7c275a46120007093e674d63ea8d9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__start_year</definition>
        <argsstring></argsstring>
        <name>__start_year</name>
        <qualifiedname>GoogleNews::__start_year</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="24" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1aed4f4cd4005160d4148c3965963db8e2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__start_month</definition>
        <argsstring></argsstring>
        <name>__start_month</name>
        <qualifiedname>GoogleNews::__start_month</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="25" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a02a30d6a25f882532fd4c91dd1606075" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__start_day</definition>
        <argsstring></argsstring>
        <name>__start_day</name>
        <qualifiedname>GoogleNews::__start_day</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="26" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a537265da0e0dfc88e27c96f000b97f29" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__end_year</definition>
        <argsstring></argsstring>
        <name>__end_year</name>
        <qualifiedname>GoogleNews::__end_year</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="28" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a7fbdc29dd7671c2bff58fb6b94bffd03" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__end_month</definition>
        <argsstring></argsstring>
        <name>__end_month</name>
        <qualifiedname>GoogleNews::__end_month</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="29" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1abbb25f530ef9c1884883cb4c42ff2ec4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::__end_day</definition>
        <argsstring></argsstring>
        <name>__end_day</name>
        <qualifiedname>GoogleNews::__end_day</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="30" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a12ca6379b93af9f7acbabd27770c5fe4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; GoogleNews::__available_countries</definition>
        <argsstring></argsstring>
        <name>__available_countries</name>
        <qualifiedname>GoogleNews::__available_countries</qualifiedname>
        <initializer>= {&quot;AU&quot;, &quot;BW&quot;, &quot;CA&quot;, &quot;ET&quot;, &quot;GH&quot;, &quot;IN&quot;, &quot;ID&quot;, &quot;IE&quot;, &quot;IL&quot;, &quot;KE&quot;, &quot;LV&quot;, &quot;MY&quot;, &quot;NA&quot;, &quot;NZ&quot;, &quot;NG&quot;, &quot;PK&quot;, &quot;PH&quot;, &quot;SG&quot;, &quot;ZA&quot;, &quot;TZ&quot;, &quot;UG&quot;, &quot;GB&quot;, &quot;US&quot;, &quot;ZW&quot;, &quot;CZ&quot;, &quot;DE&quot;, &quot;AT&quot;, &quot;CH&quot;, &quot;AR&quot;, &quot;CL&quot;, &quot;CO&quot;, &quot;CU&quot;, &quot;MX&quot;, &quot;PE&quot;, &quot;VE&quot;, &quot;BE&quot;, &quot;FR&quot;, &quot;MA&quot;, &quot;SN&quot;, &quot;IT&quot;, &quot;LT&quot;, &quot;HU&quot;, &quot;NL&quot;, &quot;NO&quot;, &quot;PL&quot;, &quot;BR&quot;, &quot;PT&quot;, &quot;RO&quot;, &quot;SK&quot;, &quot;SI&quot;, &quot;SE&quot;, &quot;VN&quot;, &quot;TR&quot;, &quot;GR&quot;, &quot;BG&quot;, &quot;RU&quot;, &quot;UA&quot;, &quot;RS&quot;, &quot;AE&quot;, &quot;SA&quot;, &quot;LB&quot;, &quot;EG&quot;, &quot;BD&quot;, &quot;TH&quot;, &quot;CN&quot;, &quot;TW&quot;, &quot;HK&quot;, &quot;JP&quot;, &quot;KR&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="32" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1aa121eb04d1d2331ef62e5ddd241053f0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; GoogleNews::__available_languages</definition>
        <argsstring></argsstring>
        <name>__available_languages</name>
        <qualifiedname>GoogleNews::__available_languages</qualifiedname>
        <initializer>= {&quot;en&quot;, &quot;id&quot;, &quot;cs&quot;, &quot;de&quot;, &quot;es-419&quot;, &quot;fr&quot;, &quot;it&quot;, &quot;lv&quot;, &quot;lt&quot;, &quot;hu&quot;, &quot;nl&quot;, &quot;no&quot;, &quot;pl&quot;, &quot;pt-419&quot;, &quot;pt-150&quot;, &quot;ro&quot;, &quot;sk&quot;, &quot;sl&quot;, &quot;sv&quot;, &quot;vi&quot;, &quot;tr&quot;, &quot;el&quot;, &quot;bg&quot;, &quot;ru&quot;, &quot;sr&quot;, &quot;uk&quot;, &quot;he&quot;, &quot;ar&quot;, &quot;mr&quot;, &quot;hi&quot;, &quot;bn&quot;, &quot;ta&quot;, &quot;te&quot;, &quot;ml&quot;, &quot;th&quot;, &quot;zh-Hans&quot;, &quot;zh-Hant&quot;, &quot;ja&quot;, &quot;ko&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="33" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a127de88caab35b55a92c353ac5265f0a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; GoogleNews::__available_topics</definition>
        <argsstring></argsstring>
        <name>__available_topics</name>
        <qualifiedname>GoogleNews::__available_topics</qualifiedname>
        <initializer>= {&quot;WORLD&quot;, &quot;NATION&quot;, &quot;BUSINESS&quot;, &quot;TECHNOLOGY&quot;, &quot;ENTERTAINMENT&quot;, &quot;SPORTS&quot;, &quot;SCIENCE&quot;, &quot;HEALTH&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="34" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1aab4ff5bf5e8ca39160264c9e1714bc8b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; GoogleNews::__available_periods</definition>
        <argsstring></argsstring>
        <name>__available_periods</name>
        <qualifiedname>GoogleNews::__available_periods</qualifiedname>
        <initializer>= {&quot;hour&quot;, &quot;day&quot;, &quot;week&quot;, &quot;month&quot;, &quot;year&quot;, &quot;any_time&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="35" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="35" bodyend="35"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1ab6124f84e31a150bb8a610290606338e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int GoogleNews::_max_results</definition>
        <argsstring></argsstring>
        <name>_max_results</name>
        <qualifiedname>GoogleNews::_max_results</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="114" column="13" bodyfile="cpp_files/header_files/news_configure.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1aa3304912ba70f5939785b3f92d354240" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::_language</definition>
        <argsstring></argsstring>
        <name>_language</name>
        <qualifiedname>GoogleNews::_language</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="115" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1acd148c22d137fb6d4740b52d0217ab65" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::_country</definition>
        <argsstring></argsstring>
        <name>_country</name>
        <qualifiedname>GoogleNews::_country</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="116" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1aec3c5d1c4039b4a16a68974eaaea1f9b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::_period</definition>
        <argsstring></argsstring>
        <name>_period</name>
        <qualifiedname>GoogleNews::_period</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="117" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a025ae1d5aed680321026405aa8b13355" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::_start_date</definition>
        <argsstring></argsstring>
        <name>_start_date</name>
        <qualifiedname>GoogleNews::_start_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="118" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a4b8c0b77d0aa179eb83e9d8c89842724" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GoogleNews::_end_date</definition>
        <argsstring></argsstring>
        <name>_end_date</name>
        <qualifiedname>GoogleNews::_end_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="119" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d59/classGoogleNews_1a3c7a018ed33131d0e15d6ae103b48302" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; GoogleNews::_exclude_websites</definition>
        <argsstring></argsstring>
        <name>_exclude_websites</name>
        <qualifiedname>GoogleNews::_exclude_websites</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="120" column="21" bodyfile="cpp_files/header_files/news_configure.h" bodystart="120" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a1b488c3eda37ebbc169b735c409438d9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GoogleNews::__WriteCallback</definition>
        <argsstring>(void *contents, size_t size, size_t nmemb, void *userp)</argsstring>
        <name>__WriteCallback</name>
        <qualifiedname>GoogleNews::__WriteCallback</qualifiedname>
        <param>
          <type>void *</type>
          <declname>contents</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userp</declname>
        </param>
        <briefdescription>
<para>Callback function to handle the data received. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer containing the downloaded data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the downloaded data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the downloaded data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>userp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the user-defined data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size * nmemb </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="45" column="23" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="31" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="dc/d59/classGoogleNews_1ace1b651309c87af8705dabba156cc780" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GoogleNews::__contains</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;vec, std::string value)</argsstring>
        <name>__contains</name>
        <qualifiedname>GoogleNews::__contains</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Checks if the given value is present in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to search for the given value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to search for in the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the value is present in the vector, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="56" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a936caaa0a96795945e59b461e655c46e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GoogleNews::__is_date_different</definition>
        <argsstring>(const int start_year, const int start_month, const int start_day, const int end_year, const int end_month, const int end_day)</argsstring>
        <name>__is_date_different</name>
        <qualifiedname>GoogleNews::__is_date_different</qualifiedname>
        <param>
          <type>const int</type>
          <declname>start_year</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>start_month</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>start_day</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>end_year</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>end_month</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>end_day</declname>
        </param>
        <briefdescription>
<para>Checks if the start and end dates are different. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_year</parametername>
</parameternamelist>
<parameterdescription>
<para>Start year for news search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_month</parametername>
</parameternamelist>
<parameterdescription>
<para>Start month for news search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_day</parametername>
</parameternamelist>
<parameterdescription>
<para>Start day for news search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_year</parametername>
</parameternamelist>
<parameterdescription>
<para>End year for news search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_month</parametername>
</parameternamelist>
<parameterdescription>
<para>End month for news search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_day</parametername>
</parameternamelist>
<parameterdescription>
<para>End day for news search </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the start and end dates are different, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="69" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="49" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a6dfa925648a76283d370ae86fece78a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::__url_parameters</definition>
        <argsstring>()</argsstring>
        <name>__url_parameters</name>
        <qualifiedname>GoogleNews::__url_parameters</qualifiedname>
        <briefdescription>
<para>Crafts parameters to be included in the url for news search. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of constructed url parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="80" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="66" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a7c9ccdbbb380b08ed6d8e71db07fddf8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::__full_url</definition>
        <argsstring>(std::string keyword)</argsstring>
        <name>__full_url</name>
        <qualifiedname>GoogleNews::__full_url</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
<para>Crafts the full url for news search. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>Keyword used for searching the news </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String of constructed url </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="85" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a5c1d83d468ab6eb777aee1536b2d24f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::__get_rss_content</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>__get_rss_content</name>
        <qualifiedname>GoogleNews::__get_rss_content</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Function to request the URL and get the content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>URL for news search </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String of the content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="92" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="95" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a9b78712fa10be73e7f4408e318a24617" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::unordered_map&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::vector&lt; std::unordered_map&lt; std::string, std::string &gt; &gt; GoogleNews::__parse_rss_content</definition>
        <argsstring>(const std::string &amp;xmlContent)</argsstring>
        <name>__parse_rss_content</name>
        <qualifiedname>GoogleNews::__parse_rss_content</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>xmlContent</declname>
        </param>
        <briefdescription>
<para>Function to parse the XML content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlContent</parametername>
</parameternamelist>
<parameterdescription>
<para>XML content to be parsed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of unordered maps containing the parsed content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="99" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="117" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a37616a0c7d7df6e9a9c478949eef2715" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::__get_news</definition>
        <argsstring>(const std::string keyword, const std::string article_file)</argsstring>
        <name>__get_news</name>
        <qualifiedname>GoogleNews::__get_news</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>article_file</declname>
        </param>
        <briefdescription>
<para>Function to get the news. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>Keyword used to search news </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>article_file</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="106" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="160" bodyend="189"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a2af3abe86210ffdd3ba34591be2ab7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GoogleNews::GoogleNews</definition>
        <argsstring>(const std::string language, const std::string country, const std::string period, const std::string start_date, const std::string end_date, const int max_results, const std::vector&lt; std::string &gt; exclude_websites)</argsstring>
        <name>GoogleNews</name>
        <qualifiedname>GoogleNews::GoogleNews</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>language</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>country</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>period</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>start_date</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>end_date</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>max_results</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt;</type>
          <declname>exclude_websites</declname>
        </param>
        <briefdescription>
<para>Initialize google news constructor with default parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Languge you want to get the news in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>country</parametername>
</parameternamelist>
<parameterdescription>
<para>Country you want to get the news from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time period to get news from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_date</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting date for when to get news from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_date</parametername>
</parameternamelist>
<parameterdescription>
<para>Ending date for when to get the news till. End date should be atleast 1 day after start date </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_results</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of results to be returned for the news </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude_websites</parametername>
</parameternamelist>
<parameterdescription>
<para>Websites to exclude when searching for the news </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="130" column="9" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="3" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a7d3967f251d27ce1f862288757c976e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GoogleNews::~GoogleNews</definition>
        <argsstring>()</argsstring>
        <name>~GoogleNews</name>
        <qualifiedname>GoogleNews::~GoogleNews</qualifiedname>
        <briefdescription>
<para>Class Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="141" column="9" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a25a1e21711c8fc0760a99e2fdab3eb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::_get_language</definition>
        <argsstring>()</argsstring>
        <name>_get_language</name>
        <qualifiedname>GoogleNews::_get_language</qualifiedname>
        <briefdescription>
<para>Function to get the language. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of the language </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="148" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a4131dfff2de824d36a9b1828e26b840a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::_get_country</definition>
        <argsstring>()</argsstring>
        <name>_get_country</name>
        <qualifiedname>GoogleNews::_get_country</qualifiedname>
        <briefdescription>
<para>Function to get the country. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of the country </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="152" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a92738667ed591803bfb4f3dc00828784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::_get_period</definition>
        <argsstring>()</argsstring>
        <name>_get_period</name>
        <qualifiedname>GoogleNews::_get_period</qualifiedname>
        <briefdescription>
<para>Function to get the period. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of the period </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="156" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1ad7d26b76fbaf7b5606d1e767f1bd4f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::_get_start_date</definition>
        <argsstring>()</argsstring>
        <name>_get_start_date</name>
        <qualifiedname>GoogleNews::_get_start_date</qualifiedname>
        <briefdescription>
<para>Function to get the start date. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of the date </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="160" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a382e35fb369776812408c984f6a57995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GoogleNews::_get_end_date</definition>
        <argsstring>()</argsstring>
        <name>_get_end_date</name>
        <qualifiedname>GoogleNews::_get_end_date</qualifiedname>
        <briefdescription>
<para>Function to get the end date. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of the date </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="164" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1aaa631e969239edde8949cada981b2437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GoogleNews::_get_max_results</definition>
        <argsstring>()</argsstring>
        <name>_get_max_results</name>
        <qualifiedname>GoogleNews::_get_max_results</qualifiedname>
        <briefdescription>
<para>Function to get the max results. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of max results </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="168" column="13" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a1bf65c22f59ccc6a9c40735897991d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; GoogleNews::_get_exclude_websites</definition>
        <argsstring>()</argsstring>
        <name>_get_exclude_websites</name>
        <qualifiedname>GoogleNews::_get_exclude_websites</qualifiedname>
        <briefdescription>
<para>Function to get the excluded websites. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vector of excluded websites </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="172" column="21" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a4bd971ceb7df3329a6ed6cd3956e44ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_get_news</definition>
        <argsstring>(const std::string keyword, const std::string filename)</argsstring>
        <name>_get_news</name>
        <qualifiedname>GoogleNews::_get_news</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Function to get the news. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>Keyword used to search news </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="177" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1ae5d2af359699c224b8c50490aeece744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_get_latest_topics</definition>
        <argsstring>(const std::string filename)</argsstring>
        <name>_get_latest_topics</name>
        <qualifiedname>GoogleNews::_get_latest_topics</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Function to get the news on latest topics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="184" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a33c977752f385413915172b6fe6a24b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_get_news_by_topic</definition>
        <argsstring>(const std::string topic, const std::string filename)</argsstring>
        <name>_get_news_by_topic</name>
        <qualifiedname>GoogleNews::_get_news_by_topic</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>topic</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Function to get the news on the given topic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Search the news on this topic </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="191" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="233" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1afc47ae362ddfb99c0b3e856b436a836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_get_news_by_country</definition>
        <argsstring>(const std::string country, const std::string filename)</argsstring>
        <name>_get_news_by_country</name>
        <qualifiedname>GoogleNews::_get_news_by_country</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>country</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Function to get the news on the given country. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>country</parametername>
</parameternamelist>
<parameterdescription>
<para>Search the news on this country </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="199" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="243" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a3485157061bb4fb3f1cfa9f793c532c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_get_news_by_site</definition>
        <argsstring>(const std::string site, const std::string filename)</argsstring>
        <name>_get_news_by_site</name>
        <qualifiedname>GoogleNews::_get_news_by_site</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>site</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Function to get the news from the given site. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>site</parametername>
</parameternamelist>
<parameterdescription>
<para>Search the news from this site </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/d30/classFile" kindref="compound">File</ref> to save articles in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="207" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="253" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a0d4c8b3f5e3c2316d3852ab5db119674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_set_language</definition>
        <argsstring>(const std::string language)</argsstring>
        <name>_set_language</name>
        <qualifiedname>GoogleNews::_set_language</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Function to set the language. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Languge you want to get the news in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="216" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a6b103989a088bb0c6a9fec7bf697011b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_set_country</definition>
        <argsstring>(const std::string country)</argsstring>
        <name>_set_country</name>
        <qualifiedname>GoogleNews::_set_country</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>country</declname>
        </param>
        <briefdescription>
<para>Function to set the country. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>country</parametername>
</parameternamelist>
<parameterdescription>
<para>Country you want to get the news from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="222" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1ada8d16cc4876c105730534bef3907728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_set_period</definition>
        <argsstring>(const std::string period)</argsstring>
        <name>_set_period</name>
        <qualifiedname>GoogleNews::_set_period</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Function to set the time period. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time period to get news from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="228" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="272" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a1cb58f8fcabd0d0c6da8301e6d5df2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GoogleNews::_set_start_date</definition>
        <argsstring>(const std::string start_date)</argsstring>
        <name>_set_start_date</name>
        <qualifiedname>GoogleNews::_set_start_date</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>start_date</declname>
        </param>
        <briefdescription>
<para>Function to set the start date. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_date</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting date for when to get news from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if start date and end date are different </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="235" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="278" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1ae7cb80e0d863e6453e2fc78b10323917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GoogleNews::_set_end_date</definition>
        <argsstring>(const std::string end_date)</argsstring>
        <name>_set_end_date</name>
        <qualifiedname>GoogleNews::_set_end_date</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>end_date</declname>
        </param>
        <briefdescription>
<para>Function to set the end date. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>end_date</parametername>
</parameternamelist>
<parameterdescription>
<para>Ending date till when news is presented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if start date and end date are different </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="242" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="296" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1a9431e69a625cb37e29d4b4f78cd88806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_set_max_results</definition>
        <argsstring>(const int max_results)</argsstring>
        <name>_set_max_results</name>
        <qualifiedname>GoogleNews::_set_max_results</qualifiedname>
        <param>
          <type>const int</type>
          <declname>max_results</declname>
        </param>
        <briefdescription>
<para>Function to set the max results. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_results</parametername>
</parameternamelist>
<parameterdescription>
<para>Max number of results for the news </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="248" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="dc/d59/classGoogleNews_1abf98b137b4aa1457487af94aee93b115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GoogleNews::_set_excluded_websites</definition>
        <argsstring>(std::vector&lt; std::string &gt; excluded_websites)</argsstring>
        <name>_set_excluded_websites</name>
        <qualifiedname>GoogleNews::_set_excluded_websites</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>excluded_websites</declname>
        </param>
        <briefdescription>
<para>Function to set the excluded websites. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>excluded_websites</parametername>
</parameternamelist>
<parameterdescription>
<para>Websites to exclude from the results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp_files/header_files/news_configure.h" line="254" column="14" bodyfile="cpp_files/program_files/news_configure.cpp" bodystart="320" bodyend="324"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class to Search News on Google News. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="cpp_files/header_files/news_configure.h" line="18" column="1" bodyfile="cpp_files/header_files/news_configure.h" bodystart="18" bodyend="257"/>
    <listofallmembers>
      <member refid="dc/d59/classGoogleNews_1a12ca6379b93af9f7acbabd27770c5fe4" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__available_countries</name></member>
      <member refid="dc/d59/classGoogleNews_1aa121eb04d1d2331ef62e5ddd241053f0" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__available_languages</name></member>
      <member refid="dc/d59/classGoogleNews_1aab4ff5bf5e8ca39160264c9e1714bc8b" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__available_periods</name></member>
      <member refid="dc/d59/classGoogleNews_1a127de88caab35b55a92c353ac5265f0a" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__available_topics</name></member>
      <member refid="dc/d59/classGoogleNews_1ace1b651309c87af8705dabba156cc780" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__contains</name></member>
      <member refid="dc/d59/classGoogleNews_1abbb25f530ef9c1884883cb4c42ff2ec4" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__end_day</name></member>
      <member refid="dc/d59/classGoogleNews_1a7fbdc29dd7671c2bff58fb6b94bffd03" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__end_month</name></member>
      <member refid="dc/d59/classGoogleNews_1a537265da0e0dfc88e27c96f000b97f29" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__end_year</name></member>
      <member refid="dc/d59/classGoogleNews_1a7c9ccdbbb380b08ed6d8e71db07fddf8" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__full_url</name></member>
      <member refid="dc/d59/classGoogleNews_1a37616a0c7d7df6e9a9c478949eef2715" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__get_news</name></member>
      <member refid="dc/d59/classGoogleNews_1a5c1d83d468ab6eb777aee1536b2d24f1" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__get_rss_content</name></member>
      <member refid="dc/d59/classGoogleNews_1a936caaa0a96795945e59b461e655c46e" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__is_date_different</name></member>
      <member refid="dc/d59/classGoogleNews_1a76c1ba4c506e760487c3575270e3b6c1" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__news_url</name></member>
      <member refid="dc/d59/classGoogleNews_1a9b78712fa10be73e7f4408e318a24617" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__parse_rss_content</name></member>
      <member refid="dc/d59/classGoogleNews_1a02a30d6a25f882532fd4c91dd1606075" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__start_day</name></member>
      <member refid="dc/d59/classGoogleNews_1aed4f4cd4005160d4148c3965963db8e2" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__start_month</name></member>
      <member refid="dc/d59/classGoogleNews_1a59a7c275a46120007093e674d63ea8d9" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__start_year</name></member>
      <member refid="dc/d59/classGoogleNews_1a6dfa925648a76283d370ae86fece78a2" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__url_parameters</name></member>
      <member refid="dc/d59/classGoogleNews_1a1b488c3eda37ebbc169b735c409438d9" prot="private" virt="non-virtual"><scope>GoogleNews</scope><name>__WriteCallback</name></member>
      <member refid="dc/d59/classGoogleNews_1acd148c22d137fb6d4740b52d0217ab65" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_country</name></member>
      <member refid="dc/d59/classGoogleNews_1a4b8c0b77d0aa179eb83e9d8c89842724" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_end_date</name></member>
      <member refid="dc/d59/classGoogleNews_1a3c7a018ed33131d0e15d6ae103b48302" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_exclude_websites</name></member>
      <member refid="dc/d59/classGoogleNews_1a4131dfff2de824d36a9b1828e26b840a" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_country</name></member>
      <member refid="dc/d59/classGoogleNews_1a382e35fb369776812408c984f6a57995" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_end_date</name></member>
      <member refid="dc/d59/classGoogleNews_1a1bf65c22f59ccc6a9c40735897991d33" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_exclude_websites</name></member>
      <member refid="dc/d59/classGoogleNews_1a25a1e21711c8fc0760a99e2fdab3eb55" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_language</name></member>
      <member refid="dc/d59/classGoogleNews_1ae5d2af359699c224b8c50490aeece744" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_latest_topics</name></member>
      <member refid="dc/d59/classGoogleNews_1aaa631e969239edde8949cada981b2437" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_max_results</name></member>
      <member refid="dc/d59/classGoogleNews_1a4bd971ceb7df3329a6ed6cd3956e44ed" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_news</name></member>
      <member refid="dc/d59/classGoogleNews_1afc47ae362ddfb99c0b3e856b436a836d" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_news_by_country</name></member>
      <member refid="dc/d59/classGoogleNews_1a3485157061bb4fb3f1cfa9f793c532c4" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_news_by_site</name></member>
      <member refid="dc/d59/classGoogleNews_1a33c977752f385413915172b6fe6a24b4" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_news_by_topic</name></member>
      <member refid="dc/d59/classGoogleNews_1a92738667ed591803bfb4f3dc00828784" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_period</name></member>
      <member refid="dc/d59/classGoogleNews_1ad7d26b76fbaf7b5606d1e767f1bd4f02" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_get_start_date</name></member>
      <member refid="dc/d59/classGoogleNews_1aa3304912ba70f5939785b3f92d354240" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_language</name></member>
      <member refid="dc/d59/classGoogleNews_1ab6124f84e31a150bb8a610290606338e" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_max_results</name></member>
      <member refid="dc/d59/classGoogleNews_1aec3c5d1c4039b4a16a68974eaaea1f9b" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_period</name></member>
      <member refid="dc/d59/classGoogleNews_1a6b103989a088bb0c6a9fec7bf697011b" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_country</name></member>
      <member refid="dc/d59/classGoogleNews_1ae7cb80e0d863e6453e2fc78b10323917" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_end_date</name></member>
      <member refid="dc/d59/classGoogleNews_1abf98b137b4aa1457487af94aee93b115" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_excluded_websites</name></member>
      <member refid="dc/d59/classGoogleNews_1a0d4c8b3f5e3c2316d3852ab5db119674" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_language</name></member>
      <member refid="dc/d59/classGoogleNews_1a9431e69a625cb37e29d4b4f78cd88806" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_max_results</name></member>
      <member refid="dc/d59/classGoogleNews_1ada8d16cc4876c105730534bef3907728" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_period</name></member>
      <member refid="dc/d59/classGoogleNews_1a1cb58f8fcabd0d0c6da8301e6d5df2ba" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_set_start_date</name></member>
      <member refid="dc/d59/classGoogleNews_1a025ae1d5aed680321026405aa8b13355" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>_start_date</name></member>
      <member refid="dc/d59/classGoogleNews_1a2af3abe86210ffdd3ba34591be2ab7d0" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>GoogleNews</name></member>
      <member refid="dc/d59/classGoogleNews_1a7d3967f251d27ce1f862288757c976e0" prot="public" virt="non-virtual"><scope>GoogleNews</scope><name>~GoogleNews</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
