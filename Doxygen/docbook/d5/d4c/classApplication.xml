<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classApplication" xml:lang="en-US">
<title>Application Class Reference</title>
<indexterm><primary>Application</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classApplication_1afa8cc05ce6b6092be5ecdfdae44e05f8">Application</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classApplication_1a748bca84fefb9c12661cfaa2f623748d">~Application</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1acbbd227002cec7a54de598c303c12a6f">start_app</link> (const std::string app_name, const std::vector&lt; std::string &gt; arguments)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1a84fd4a7d08041d8175bab4f4cfeb4e87">stop_app</link> (const pid_t pid=0, const bool force=false)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1adb798815e37895fedbae4efb2f6c9f19">get_status</link> (pid_t pid=0, const std::string filename=&quot;status_file.txt&quot;, const std::string file_path=&quot;log_files/&quot;)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1a6c6ea3676480bafb2d75a1507586130d">get_window_handle</link> (pid_t pid=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1a26810c72e58fc358c1b6a2932a6c5fea">window_foreground</link> (Window window=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1af688f3e167b1c63d184ade900fa6bf04">minimize_window</link> (Window window=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1aeb02209c8f6034530861b7569950944b">maximize_window</link> (Window window=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1a1f542308c8a5b210fad57b0e80993e3b">restore_window</link> (Window window=0)</para>
</listitem>
            <listitem><para>void <link linkend="_classApplication_1a9b88f3fe410d12677dcf7be565ade365">resize_or_move_window</link> (const int x, const int y, const int width, const int height, Window window=0)</para>
</listitem>
            <listitem><para>bool <link linkend="_classApplication_1aa08e75068b91a2ae2765c9affb725ad0">is_window_in_focus</link> (Window window=0)</para>
</listitem>
            <listitem><para>bool <link linkend="_classApplication_1acae99d4f3eb7c2b619df3e0f2f1c3b0b">check_for_updates</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classApplication_1ad0fc9783e98e20ffc61af30c60f0fc84">install_updates</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classApplication_1aaebdc2221c976766afa5cd3f8818d8f7">install_application</link> (const std::string package_name)</para>
</listitem>
            <listitem><para>bool <link linkend="_classApplication_1a60a68db32149ba3b5908f99959a5aea9">uninstall_application</link> (const std::string package_name)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classApplication_1afa8cc05ce6b6092be5ecdfdae44e05f8"/><section>
    <title>Application()</title>
<indexterm><primary>Application</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>Application</secondary></indexterm>
<para><computeroutput>Application::Application ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a748bca84fefb9c12661cfaa2f623748d"/><section>
    <title>~Application()</title>
<indexterm><primary>~Application</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>~Application</secondary></indexterm>
<para><computeroutput>Application::~Application ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classApplication_1acae99d4f3eb7c2b619df3e0f2f1c3b0b"/><section>
    <title>check_for_updates()</title>
<indexterm><primary>check_for_updates</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>check_for_updates</secondary></indexterm>
<para><computeroutput>bool Application::check_for_updates ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1adb798815e37895fedbae4efb2f6c9f19"/><section>
    <title>get_status()</title>
<indexterm><primary>get_status</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>get_status</secondary></indexterm>
<para><computeroutput>void Application::get_status (pid_t pid = <computeroutput>0</computeroutput>
, const std::string filename = <computeroutput>&quot;status_file.txt&quot;</computeroutput>
, const std::string file_path = <computeroutput>&quot;log_files/&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a6c6ea3676480bafb2d75a1507586130d"/><section>
    <title>get_window_handle()</title>
<indexterm><primary>get_window_handle</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>get_window_handle</secondary></indexterm>
<para><computeroutput>void Application::get_window_handle (pid_t pid = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1aaebdc2221c976766afa5cd3f8818d8f7"/><section>
    <title>install_application()</title>
<indexterm><primary>install_application</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>install_application</secondary></indexterm>
<para><computeroutput>bool Application::install_application (const std::string package_name)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1ad0fc9783e98e20ffc61af30c60f0fc84"/><section>
    <title>install_updates()</title>
<indexterm><primary>install_updates</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>install_updates</secondary></indexterm>
<para><computeroutput>bool Application::install_updates ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1aa08e75068b91a2ae2765c9affb725ad0"/><section>
    <title>is_window_in_focus()</title>
<indexterm><primary>is_window_in_focus</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>is_window_in_focus</secondary></indexterm>
<para><computeroutput>bool Application::is_window_in_focus (Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1aeb02209c8f6034530861b7569950944b"/><section>
    <title>maximize_window()</title>
<indexterm><primary>maximize_window</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>maximize_window</secondary></indexterm>
<para><computeroutput>void Application::maximize_window (Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1af688f3e167b1c63d184ade900fa6bf04"/><section>
    <title>minimize_window()</title>
<indexterm><primary>minimize_window</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>minimize_window</secondary></indexterm>
<para><computeroutput>void Application::minimize_window (Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a9b88f3fe410d12677dcf7be565ade365"/><section>
    <title>resize_or_move_window()</title>
<indexterm><primary>resize_or_move_window</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>resize_or_move_window</secondary></indexterm>
<para><computeroutput>void Application::resize_or_move_window (const int x, const int y, const int width, const int height, Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a1f542308c8a5b210fad57b0e80993e3b"/><section>
    <title>restore_window()</title>
<indexterm><primary>restore_window</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>restore_window</secondary></indexterm>
<para><computeroutput>void Application::restore_window (Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1acbbd227002cec7a54de598c303c12a6f"/><section>
    <title>start_app()</title>
<indexterm><primary>start_app</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>start_app</secondary></indexterm>
<para><computeroutput>void Application::start_app (const std::string app_name, const std::vector&lt; std::string &gt; arguments)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a84fd4a7d08041d8175bab4f4cfeb4e87"/><section>
    <title>stop_app()</title>
<indexterm><primary>stop_app</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>stop_app</secondary></indexterm>
<para><computeroutput>void Application::stop_app (const pid_t pid = <computeroutput>0</computeroutput>
, const bool force = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a60a68db32149ba3b5908f99959a5aea9"/><section>
    <title>uninstall_application()</title>
<indexterm><primary>uninstall_application</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>uninstall_application</secondary></indexterm>
<para><computeroutput>bool Application::uninstall_application (const std::string package_name)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classApplication_1a26810c72e58fc358c1b6a2932a6c5fea"/><section>
    <title>window_foreground()</title>
<indexterm><primary>window_foreground</primary><secondary>Application</secondary></indexterm>
<indexterm><primary>Application</primary><secondary>window_foreground</secondary></indexterm>
<para><computeroutput>void Application::window_foreground (Window window = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
<link linkend="_application__configure_8cpp">application_configure.cpp</link></section>
</section>
