.TH "Application" 3 "AI Ecosystem" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Application
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBApplication\fP ()"
.br
.ti -1c
.RI "\fB~Application\fP ()"
.br
.ti -1c
.RI "void \fBstart_app\fP (const std::string app_name, const std::vector< std::string > arguments)"
.br
.ti -1c
.RI "void \fBstop_app\fP (const pid_t pid=0, const bool force=false)"
.br
.ti -1c
.RI "void \fBget_status\fP (pid_t pid=0, const std::string filename='status_file\&.txt', const std::string file_path='log_files/')"
.br
.ti -1c
.RI "void \fBget_window_handle\fP (pid_t pid=0)"
.br
.ti -1c
.RI "void \fBwindow_foreground\fP (Window window=0)"
.br
.ti -1c
.RI "void \fBminimize_window\fP (Window window=0)"
.br
.ti -1c
.RI "void \fBmaximize_window\fP (Window window=0)"
.br
.ti -1c
.RI "void \fBrestore_window\fP (Window window=0)"
.br
.ti -1c
.RI "void \fBresize_or_move_window\fP (const int x, const int y, const int width, const int height, Window window=0)"
.br
.ti -1c
.RI "bool \fBis_window_in_focus\fP (Window window=0)"
.br
.ti -1c
.RI "bool \fBcheck_for_updates\fP ()"
.br
.ti -1c
.RI "bool \fBinstall_updates\fP ()"
.br
.ti -1c
.RI "bool \fBinstall_application\fP (const std::string package_name)"
.br
.ti -1c
.RI "bool \fBuninstall_application\fP (const std::string package_name)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Application::Application ()\fC [inline]\fP"

.SS "Application::~Application ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool Application::check_for_updates ()\fC [inline]\fP"

.SS "void Application::get_status (pid_t pid = \fC0\fP, const std::string filename = \fC'status_file\&.txt'\fP, const std::string file_path = \fC'log_files/'\fP)\fC [inline]\fP"

.SS "void Application::get_window_handle (pid_t pid = \fC0\fP)\fC [inline]\fP"

.SS "bool Application::install_application (const std::string package_name)\fC [inline]\fP"

.SS "bool Application::install_updates ()\fC [inline]\fP"

.SS "bool Application::is_window_in_focus (Window window = \fC0\fP)\fC [inline]\fP"

.SS "void Application::maximize_window (Window window = \fC0\fP)\fC [inline]\fP"

.SS "void Application::minimize_window (Window window = \fC0\fP)\fC [inline]\fP"

.SS "void Application::resize_or_move_window (const int x, const int y, const int width, const int height, Window window = \fC0\fP)\fC [inline]\fP"

.SS "void Application::restore_window (Window window = \fC0\fP)\fC [inline]\fP"

.SS "void Application::start_app (const std::string app_name, const std::vector< std::string > arguments)\fC [inline]\fP"

.SS "void Application::stop_app (const pid_t pid = \fC0\fP, const bool force = \fCfalse\fP)\fC [inline]\fP"

.SS "bool Application::uninstall_application (const std::string package_name)\fC [inline]\fP"

.SS "void Application::window_foreground (Window window = \fC0\fP)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for AI Ecosystem from the source code\&.
